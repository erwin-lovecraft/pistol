// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package ormmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listEvents = `-- name: ListEvents :many
SELECT id, method, header, query_params, body, created_at, room_id FROM events WHERE room_id = $1 ORDER BY created_at DESC OFFSET $2 LIMIT $3
`

type ListEventsParams struct {
	RoomID pgtype.UUID
	Offset int32
	Limit  int32
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.RoomID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Method,
			&i.Header,
			&i.QueryParams,
			&i.Body,
			&i.CreatedAt,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveEvent = `-- name: SaveEvent :one
INSERT INTO events (id, method, header, query_params, body)
VALUES ($1, $2, $3, $4, $5) ON CONFLICT (id) DO
UPDATE SET method = EXCLUDED.method,
    header = EXCLUDED.header,
    query_params = EXCLUDED.query_params,
    body = EXCLUDED.body
RETURNING created_at
`

type SaveEventParams struct {
	ID          int64
	Method      string
	Header      []byte
	QueryParams []byte
	Body        []byte
}

func (q *Queries) SaveEvent(ctx context.Context, arg SaveEventParams) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, saveEvent,
		arg.ID,
		arg.Method,
		arg.Header,
		arg.QueryParams,
		arg.Body,
	)
	var created_at pgtype.Timestamptz
	err := row.Scan(&created_at)
	return created_at, err
}
